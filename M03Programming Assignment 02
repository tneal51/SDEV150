// Rational.java 

import java.math.*;

@SuppressWarnings("rawtypes")
public class Rational extends Number implements Comparable {
private BigInteger[] bigIntegers = new BigInteger[2];

//Constructor for ratinoal class
public Rational() {
this(new BigInteger("0"), new BigInteger("1"));
}

//Constructor for rational class with numerator and denominator */
public Rational(BigInteger numerator, BigInteger denominator) {
BigInteger gcd = gcd(numerator, denominator);
bigIntegers[0] = (denominator.compareTo(BigInteger.ZERO) > 0
? BigInteger.ONE :
new BigInteger("-1")).multiply(numerator.divide(gcd));
bigIntegers[1] = denominator.divide(gcd);
}

//method to find GCD of two numbers
private static BigInteger gcd(BigInteger n, BigInteger d) {
BigInteger bigInteger1 = n;
BigInteger bigInteger2 = d;
BigInteger gcd = BigInteger.ONE;

for (BigInteger k = BigInteger.ONE;
k.compareTo(bigInteger1) <= 0 && k.compareTo(bigInteger2) <= 0;
k = k.add(BigInteger.ONE)) {
if (bigInteger1.remainder(k).compareTo(BigInteger.ZERO) == 0 &&
bigInteger2.remainder(k).compareTo(BigInteger.ZERO) == 0)
gcd = k;
}

return gcd;
}

//method to return numerator
public BigInteger getNumerator() {
return bigIntegers[0];
}

//method to return denominator
public BigInteger getDenominator() {
return bigIntegers[1];
}

//method to add a rational number
public Rational add(Rational secondRational) {
BigInteger n = (bigIntegers[0].multiply(secondRational.getDenominator())).add(
bigIntegers[1].multiply(secondRational.getNumerator()));
BigInteger d = bigIntegers[1].multiply(secondRational.getDenominator());
return new Rational(n, d);
}

//method to subtract a rational number
public Rational subtract(Rational secondRational) {
BigInteger n = (bigIntegers[0].multiply(secondRational.getDenominator())).subtract(
bigIntegers[1].multiply(secondRational.getNumerator()));
BigInteger d = bigIntegers[1].multiply(secondRational.getDenominator());
return new Rational(n, d);
}

//method to mulitply a rational number
public Rational multiply(Rational secondRational) {
BigInteger n = bigIntegers[0].multiply(secondRational.getNumerator());
BigInteger d = bigIntegers[1].multiply(secondRational.getDenominator());
return new Rational(n, d);
}

//method to divide a rational number
public Rational divide(Rational secondRational) {
BigInteger n = bigIntegers[0].multiply(secondRational.getDenominator());
BigInteger d = bigIntegers[1].multiply(secondRational.getNumerator());
return new Rational(n, d);
}

@Override
public String toString() {
if (bigIntegers[1].compareTo(BigInteger.ONE) == 0)
return bigIntegers[0] + "";
else
return bigIntegers[0] + "/" + bigIntegers[1];
}

@Override
public boolean equals(Object other) {
    return ((this.subtract((Rational)(other))).getNumerator()).compareTo(
            BigInteger.ZERO) == 0;
}

@Override // intValue method
public int intValue() {
return (int)doubleValue();
}

@Override // floatValue method
public float floatValue() {
return (float)doubleValue();
}

@Override // doubleValue method
public double doubleValue() {
return this.getNumerator().doubleValue() /
this.getDenominator().doubleValue();
}

@Override // abstract longValue method
public long longValue() {
return (long)doubleValue();
}

@Override
public int compareTo(Object o) {
BigInteger zero = BigInteger.ZERO;
BigInteger n = this.subtract((Rational)o).getNumerator();
if (n.compareTo(zero) > 0)
return 1;
else if (n.compareTo(zero) < 0)
return -1;
else
return 0;
}

    public BigInteger[] getBigIntegers() {
        return bigIntegers;
    }
}

// LittleInteger.java

import java.math.BigInteger;

public class LittleInteger {
public static void main(String[] args) {
//First Rational Number
Rational rational1 = new Rational(new BigInteger("3"),
new BigInteger("454"));

//Second Rational Number
Rational rational2 = new Rational(new BigInteger("7"),
new BigInteger("2389"));

// Display results
System.out.println(rational1 + " + " + rational2 + " = " + rational1.add(rational2));
System.out.println(rational1 + " - " + rational2 + " = " + rational1.subtract(rational2));
System.out.println(rational1 + " * " + rational2 + " = " + rational1.multiply(rational2));
System.out.println(rational1 + " / " + rational2 + " = " + rational1.divide(rational2));
System.out.println(rational2 + " is " + rational2.doubleValue());
}
}
